basePath: /
definitions:
  api.ErrorResponse:
    properties:
      error:
        example: something went wrong
        type: string
    type: object
  api.PagedBooks:
    properties:
      items:
        items:
          $ref: '#/definitions/models.Book'
        type: array
      limit:
        example: 10
        type: integer
      page:
        example: 1
        type: integer
      total:
        example: 42
        type: integer
    type: object
  auth.loginDTO:
    properties:
      email:
        example: admin@mail.com
        type: string
      password:
        example: adminbookshelf
        type: string
    type: object
  auth.registerDTO:
    properties:
      email:
        example: user@mail.com
        type: string
      name:
        example: User Name
        type: string
      password:
        example: "12345678"
        type: string
    type: object
  models.Book:
    properties:
      author:
        example: George Orwell
        type: string
      category:
        example: Fiction
        type: string
      coverUrl:
        example: /uploads/uuid.jpg
        type: string
      createdAt:
        type: string
      id:
        type: integer
      price:
        example: 60000
        type: number
      stock:
        example: 9
        type: integer
      title:
        example: "1984"
        type: string
      updatedAt:
        type: string
    type: object
info:
  contact: {}
  description: Mini Book Management API (Gin + GORM + JWT)
  title: Bookshelf API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: Login payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/auth.loginDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Login
      tags:
      - auth
  /auth/me:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Current user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      parameters:
      - description: Register payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/auth.registerDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Register new user
      tags:
      - auth
  /books:
    get:
      parameters:
      - description: Search by title/author
        in: query
        name: q
        type: string
      - description: Filter by category
        in: query
        name: category
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Page size (1-100)
        in: query
        name: limit
        type: integer
      - default: created_at
        description: Sort field
        in: query
        name: sort
        type: string
      - default: DESC
        description: ASC or DESC
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.PagedBooks'
      summary: List books
      tags:
      - books
    post:
      consumes:
      - multipart/form-data
      parameters:
      - description: Title
        in: formData
        name: title
        required: true
        type: string
      - description: Author
        in: formData
        name: author
        type: string
      - description: Category
        in: formData
        name: category
        type: string
      - description: Price
        in: formData
        name: price
        type: number
      - description: Stock
        in: formData
        name: stock
        type: integer
      - description: Cover image (.jpg/.jpeg/.png/.webp)
        in: formData
        name: cover
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Book'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a book
      tags:
      - books
  /books/{id}:
    delete:
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a book
      tags:
      - books
    get:
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Book'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get a book
      tags:
      - books
    put:
      consumes:
      - multipart/form-data
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      - description: Title
        in: formData
        name: title
        type: string
      - description: Author
        in: formData
        name: author
        type: string
      - description: Category
        in: formData
        name: category
        type: string
      - description: Price
        in: formData
        name: price
        type: number
      - description: Stock
        in: formData
        name: stock
        type: integer
      - description: New cover
        in: formData
        name: cover
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Book'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a book
      tags:
      - books
schemes:
- http
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
